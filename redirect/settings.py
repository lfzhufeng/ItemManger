"""
Django settings for redirect project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import sys
import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
APP_DIR = os.path.join(BASE_DIR,"apps")
sys.path.insert(0,APP_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-jv#_ycf$qi%vn*n+79dq$i)gc9a2(lbi8$rfg^g&q=c2pm3&z='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'django_celery_beat',
    'rest_framework',
    'apps.users',
    'apps.orders',
    'apps.videos',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'redirect.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'redirect.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get("DB_NAME"),
        'USER': os.environ.get("DB_USER"),
        'HOST': os.environ.get("DB_HOST"),
        'PORT': os.environ.get("DB_PORT"),
        'PASSWORD': os.environ.get("DB_PWD"),
    }
}

AUTH_USER_MODEL = 'users.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True
# celery配置
# Redis 作为消息代理
CELERY_BROKER_URL = 'redis://localhost:6379/0'
# 存储任务结果（可选）
CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'
# 时区设置
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_ENABLE_UTC = True
# 任务序列化格式
CELERY_TASK_SERIALIZER = 'json'
# 结果序列化格式
CELERY_RESULT_SERIALIZER = 'json'
# 忽略已过期的任务结果
CELERY_TASK_IGNORE_RESULT = False
CELERY_BEAT_SCHEDULE = {
    'update': {
        'task': 'orders.tasks.update',
        'schedule': 0.5,  # 0.5秒间隔
    }
}


# cors 配置
# 允许携带凭证
CORS_ALLOW_CREDENTIALS = True
# 允许所有跨域
CORS_ALLOW_ALL_ORIGINS = True
# 允许跨域的ip或域名
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # 开发环境中的前端地址
    "https://your-frontend-domain.com",  # 生产环境中的前端地址
]
# 允许跨域的请求方式
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]
# 允许跨域的请求头
CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization',
    'x-csrftoken',
]
# 允许跨域的自定义请求头
CORS_EXPOSE_HEADERS = [
    'Content-Type',
    'X-CSRFToken',
    'Authorization',
]




# redis缓存配置
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',  # 使用 django-redis 缓存后端
        'LOCATION': 'redis://127.0.0.1:6379/2',  # Redis 服务地址，1 表示使用 Redis 数据库 1
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',  # 客户端类，默认即可
        }
    }
}
# DRF配置
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Simple JWT token
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'EXCEPTION_HANDLER': 'utils.exception.custom_exception_handler',
}

# JWT配置
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # 访问令牌有效期
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # 刷新令牌有效期
    'ROTATE_REFRESH_TOKENS': True,  # 是否旋转刷新令牌
    'BLACKLIST_AFTER_ROTATION': True,  # 是否使用黑名单
    'ALGORITHM': 'HS256',  # 加密算法
    'SIGNING_KEY': 'your-secret-key',  # 密钥
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
}

# 日志配置
LOG_DIR = BASE_DIR / 'logs'
if not LOG_DIR.exists():
    LOG_DIR.mkdir(parents=True)
INFO_PATH = os.path.join(LOG_DIR, 'info.log')
if not os.path.exists(INFO_PATH):
    os.makedirs(INFO_PATH)
DEBUG_PATH = os.path.join(LOG_DIR, 'debug.log')
if not os.path.exists(DEBUG_PATH):
    os.makedirs(DEBUG_PATH)
ERROR_PATH = os.path.join(LOG_DIR, 'error.log')
if not os.path.exists(ERROR_PATH):
    os.makedirs(ERROR_PATH)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse"
        }
    },
    "formatters": {
        "verbose": {  # 详细日志格式
            "format": "%(levelname)s %(asctime)s %(module)s "
                      "%(process)d %(thread)d %(message)s"
        },
        "simple": {  # 简单日志格式
            "format": '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
    },
    "handlers": {
        # INFO 及以上级别日志输出到 info.log
        'info_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': INFO_PATH,
            'maxBytes': 1024 * 1024 * 10,  # 每个日志文件最大 10MB
            'backupCount': 5,  # 最多保留 5 个备份
            'formatter': 'simple',
            'encoding': 'utf-8',
        },
        # DEBUG 及以上级别日志输出到 debug.log
        'debug_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': DEBUG_PATH,
            'maxBytes': 1024 * 1024 * 10,  # 每个日志文件最大 10MB
            'backupCount': 5,
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        # ERROR 及以上级别日志输出到 error.log
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': ERROR_PATH,
            'maxBytes': 1024 * 1024 * 10,  # 每个日志文件最大 10MB
            'backupCount': 5,
            'formatter': 'simple',
            'encoding': 'utf-8',
        },
        # 打印到终端的控制台
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    "loggers": {
        # Django 请求日志
        "django.request": {
            'handlers': ['console', 'error_file'],  # 请求错误日志输出到控制台和 error.log
            'level': 'ERROR',
            'propagate': True,
        },
        # Django 安全相关的日志
        "django.security.DisallowedHost": {
            'handlers': ['console', 'error_file'],  # 安全日志输出到控制台和 error.log
            'level': 'ERROR',
            'propagate': True,
        },
        # 其他日志输出
        "django": {
            'handlers': ['console', 'info_file', 'debug_file'],  # 将信息日志输出到控制台、info.log 和 debug.log
            'level': 'ERROR',  # 全局日志级别为 DEBUG
            'propagate': True,
        },
    },
    # 设置 root logger，处理未定义的日志
    "root": {
        'level': 'INFO',
        'handlers': ['console', 'info_file'],
    },
}



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
